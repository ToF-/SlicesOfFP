{
  "name": "grunt-zip",
  "description": "Zip and unzip files via a grunt plugin",
  "version": "0.17.1",
  "homepage": "https://github.com/twolfson/grunt-zip",
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com",
    "url": "http://twolfson.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/twolfson/grunt-zip.git"
  },
  "bugs": {
    "url": "https://github.com/twolfson/grunt-zip/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/twolfson/grunt-zip/blob/master/LICENSE-MIT"
    }
  ],
  "main": "grunt.js",
  "bin": {
    "grunt-zip": "bin/grunt-zip"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "rm -r test/actual &> /dev/null && mocha"
  },
  "dependencies": {
    "grunt-retro": "~0.6.0",
    "jszip": "~2.5.0"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "underscore.string": "~2.3.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-cli": "~0.1.11",
    "mocha": "~1.20.1",
    "chai": "~1.9.1",
    "shell-quote": "~1.4.1"
  },
  "keywords": [
    "gruntplugin",
    "grunt",
    "zip",
    "unzip",
    "compress",
    "decompress"
  ],
  "readme": "# grunt-zip [![Build status](https://travis-ci.org/twolfson/grunt-zip.png?branch=master)](https://travis-ci.org/twolfson/grunt-zip)\n\nZip and unzip files via a [grunt][] plugin\n\nThis was created for dependency management via [`grunt-curl`][] and [`grunt-zip`][] as a low-tech alternative to `bower` and similar solutions.\n\nhttp://twolfson.com/2014-01-19-low-tech-dependency-management-via-grunt-tasks\n\n[grunt]: http://gruntjs.com/\n[`grunt-curl`]: https://github.com/twolfson/grunt-curl\n[`grunt-zip`]: https://github.com/twolfson/grunt-zip\n\n**Features**\n\n- Zip and unzip support\n- Per-file renaming/routing via `router` option\n- File skipping via `router` option\n- Preservation of UNIX file permissions during extraction\n\n## Getting Started\n`grunt-zip` can be installed via npm: `npm install grunt-zip`\n\n`grunt-zip` provides 2 grunt tasks: `zip` and `unzip`\n\n### zip\nCompress files into a `zip` file\n\n```js\n// Inside your Gruntfile.js\nmodule.exports = function (grunt) {\n  // Define a zip task\n  grunt.initConfig({\n    zip: {\n      'location/to/zip/files.zip': ['file/to/zip.js', 'another/file.css']\n    }\n  });\n\n  // Load in `grunt-zip`\n  grunt.loadNpmTasks('grunt-zip');\n};\n```\n\nNow, we can run our task:\n\n```bash\n$ grunt zip\nRunning \"zip:location/to/zip/files.zip\" (zip) task\nFile \"location/to/zip/files.zip\" created.\n\nDone, without errors.\n```\n\n### unzip\nExtract files from a `zip` file\n\n```js\n// Inside your Gruntfile.js\nmodule.exports = function (grunt) {\n  // Define an unzip task\n  grunt.initConfig({\n    unzip: {\n      'location/to/extract/files/': 'file/to/extract.zip'\n    }\n  });\n\n  // Load in `grunt-zip`\n  grunt.loadNpmTasks('grunt-zip');\n};\n```\n\nNow, we can run our task:\n\n```bash\n$ grunt unzip\nRunning \"unzip:location/to/extract/files/\" (unzip) task\nCreated \"location/to/extract/files/\" directory\n\nDone, without errors.\n```\n\n## Documentation\n### zip\n#### Short format\nThe short format relies on [`grunt's` support of `{dest: src}`][grunt-short-format]\n\n[grunt-short-format]: http://gruntjs.com/configuring-tasks#older-formats\n\n```js\nzip: {\n  'location/to/zip/files.zip': ['file/to/zip.js', 'another/file.css']\n}\n```\n\nThis format is suggested only if you don't need to run `zip` tasks separately\n\n```bash\ngrunt zip\n```\n\nIf you want to run this task standalone, it must be executed via:\n\n```bash\ngrunt zip:dest\n# grunt zip:location/to/zip/files.zip\n```\n\n#### Long format\n```js\nzip: {\n  'long-format': {\n    src: ['file/to/zip.js', 'another/file.css'],\n    dest: 'location/to/zip/files.zip'\n  }\n}\n```\n\n#### Using `cwd`\nThe `cwd` option sets the base path for the zipped files\n\n```js\nzip: {\n  'using-cwd': {\n    cwd: 'nested/'\n    // Files will zip to 'hello.js' and 'world.js'\n    src: ['nested/hello.js', 'nested/world.js'],\n    dest: 'location/to/zip/files.zip'\n  }\n}\n```\n\n#### Using `router`\nThe `router` option allows for adjust file paths on a per-file basis. This *cannot* be used with `cwd` since there are ordering conflicts.\n\n```js\n// This example requires using node's `path` module\nvar path = require('path');\n\n// Inside grunt config\nzip: {\n  'using-router': {\n    // `router` receives the path from grunt (e.g. js/main.js)\n    // The path it returns is what the file contents are saved as (e.g. all/main.js)\n    router: function (filepath) {\n      // Route each file to all/{{filename}}\n      var filename = path.basename(filepath);\n      return 'all/' + filename;\n    },\n\n    // Files will zip to 'main.js' and 'main.css'\n    src: ['js/main.js', 'css/main.css'],\n    dest: 'files.zip'\n  }\n}\n```\n\n#### Remaining options\nWe allow for specifying the `DEFLATE` comrpession algorithm, base64 encoding, and including `dotfiles` (e.g. `.travis.yml`) via the following options:\n\n```js\nzip: {\n  'using-delate': {\n    src: ['file.js'],\n    dest: 'files.zip',\n    compression: 'DEFLATE'\n  },\n  'encode-base64': {\n    src: ['file.js'],\n    dest: 'files.zip',\n    base64: true\n  },\n  'including-dotfiles': {\n    src: ['file.js'],\n    dest: 'files.zip',\n    dot: true\n  }\n}\n```\n\n### unzip\n#### Short format\nAs with `zip`, we support the `{dest: src}` format. Additionally, it has the same drawbacks of being difficult to run standalone.\n\n```js\nunzip: {\n  'location/to/extract/files': 'file/to/extract.zip'\n}\n```\n\n#### Long format\n```js\nunzip: {\n  'long-format': {\n    // Note: If you provide multiple src files, they will all be extracted to the same folder.\n    // This is not well-tested behavior so use at your own risk.\n    src: 'file/to/extract.zip',\n    dest: 'location/to/extract/files'\n  }\n}\n```\n\n#### Using `router`\nDuring extraction, we can dynamically change the filepaths of the `zip's` contents via the `router` option.\n\n```js\n// This example requires using node's `path` module\nvar path = require('path');\n\n// Inside grunt config\nunzip: {\n  'using-router': {\n    // `router` receives the path that was used during zipping (e.g. css/bootstrap.css)\n    // The path it returns is where the file contents will be written to (e.g. dist/bootstrap.css)\n    router: function (filepath) {\n      // Route each file to dist/{{filename}}\n      var filename = path.basename(filepath);\n      return 'dist/' + filename;\n    },\n\n    // Collects all nested files in same directory\n    // css/bootstrap.css -> bootstrap.css, js/bootstrap.js -> bootstrap.js\n    src: 'bootstrap.zip',\n    dest: 'bootstrap/'\n  }\n}\n```\n\n#### Remaining options\nWith the following options we can disable the CRC32 check or decode from base64 encoding:\n\n```js\nzip: {\n  'skip-crc32-check': {\n    src: 'bootstrap.zip',\n    dest: 'bootstrap/',\n    checkCRC32: false\n  },\n  'decode-base64': {\n    src: ['file.js'],\n    dest: 'files.zip',\n    base64: true\n  }\n}\n```\n\n## Examples\n### Skipping files during `zip`\n`zip's router` allows for returning `null` to skip over a file.\n\n```js\nzip: {\n  'skip-files': {\n    // Skip over non-js files\n    router: function (filepath) {\n      // Grab the extension\n      var extname = path.extname(filepath);\n\n      // If the file is a .js, add it to the zip\n      if (extname === '.js') {\n        return filepath;\n      } else {\n      // Otherwise, skip it\n        return null;\n      }\n    },\n\n    src: ['js/main.js', 'css/main.css'],\n    dest: 'js-only.zip'\n  }\n}\n```\n\n### Skipping files during `unzip`\nAs with `zip`, `unzip` supports skipping extracting of files by returning `null` in `router`.\n\n```js\nunzip: {\n  'skip-files': {\n    // Skip over non-css files\n    router: function (filepath) {\n      // Grab the extension\n      var extname = path.extname(filepath);\n\n      // If the file is a .css, extract it\n      if (extname === '.css') {\n        return filepath;\n      } else {\n      // Otherwise, skip it\n        return null;\n      }\n    },\n\n    src: ['bootstrap.css'],\n    dest: 'bootstrap-css/'\n  }\n}\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint your code using [grunt][grunt] and test via `npm test`.\n\n## Donating\nSupport this project and [others by twolfson][gittip] via [gittip][].\n\n[![Support via Gittip][gittip-badge]][gittip]\n\n[gittip-badge]: https://rawgithub.com/twolfson/gittip-badge/master/dist/gittip.png\n[gittip]: https://www.gittip.com/twolfson/\n\n## License\nCopyright (c) 2013 Todd Wolfson\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-zip@0.17.1",
  "_from": "grunt-zip@~0.17.1"
}
